col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "sig")
abline(v=mu4, lwd=3, col="red")
# clear workspace
rm(list=ls())
# set random seed
set.seed(111)
library("MASS")
library("mvtnorm")
#install.packages("corrcoverage")
# import data
data = read.csv("~/Desktop/Wages1.csv")
ydat = data$wage
ydat = log(ydat)
x1dat = data$school
x1dat = x1dat - mean(x1dat)
x2dat = data$exper
x2dat = x2dat - mean(x2dat)
#choose a parameter value for sigma in the proposal dist
sigmaSqrd = 0.0005
# define functions
# target distribution = prior(params) * likelihood(data |params)
TargetDtbn = function(y, x1, x2, tt) {
# translate parameters to model description
constant = tt[1]
beta_sC = tt[2]
beta_eC = tt[3]
sigma = tt[4]
# compute and return posterior
logPost = log(1/sigma ^ 2)
predVal = constant + beta_sC * x1 + beta_eC * x2
logPost = logPost + sum(log(dnorm(y, predVal, sigma))) #for (n in 1:length(logWage)) {
# predVal = constant + beta_sC * sC[n] + beta_eC * eC[n]
# logPost = logPost + log(dnorm(logWage[n], predVal, sqrt(sigma)) #}
return(logPost)
}
logsum = function(x) {
val = max(x) + log(sum(exp(x - max(x))))
return(val)
}
#likelihood
likelihoodMultivar = function(y,x1, x2, b0L, b1L, b2L, sL){
loglike = logsum(x=dnorm(y, mean = (b0L+b1L*x1+b2L*x2), sd=sL))
#like = exp(loglike)
return(loglike)
}
badTargetDtbn = function(y, x1, x2, tt){
b0 = tt[1]
b1 = tt[2]
b2 = tt[3]
sig = tt[4]
logprob = likelihoodMultivar(y=y, x1=x1, x2=x2, b0L=b0, b1L=b1, b2L=b2, sL=sig) + log(1 / sig^2)
return(logprob)
}
#TargetDtbn(y=ydat, x1=x1dat, x2=x2dat, tt=c(1.7, 0.1, -0.3, 0.01))
SampleProposalDtbn = function(tt, sigParam) {
#proposal distribution is a 4D multivariate normal
# tt is a vector of 4 known values: b0, b1, b2, sig (the means)
# sigParam is a free parameter which we have to optimize for sampling
tstar = rmvnorm(1, mean=tt, sigma=diag(rep(sigParam, 4)))
isNegative = TRUE
while (isNegative == TRUE){
if (tstar[4] <= 0){
# resample
newt = rmvnorm(1, mean=tt, sigma=diag(rep(sigParam, 4)))
tstar[4] = newt[4]
} else {
isNegative = FALSE
}
}
return(tstar)
}
# lets check the new abs value resamplng
#for (i in 1:20){
#  val = SampleProposalDtbn(tt=c(-0.09, 0.1, 0.04, 0.01), sigParam=0.05)
#  print(val)
#}
# looks good
DensityProposalDtbn = function(t, tprime, sigParam) {
prob = dmvnorm(t, mean=tprime, sigma=diag(rep(sigParam, 4)))
return(prob)
}
MHsampling = function(numSamp, y, x1, x2, t0, sigmaParam) {
#check the t0 parameter satisfies the criterion P(t0) > 0
print(TargetDtbn(y=y, x1=x1, x2=x2, tt=t0))
# make blank matrix for output
out = matrix(rep(0, numSamp * 4), nrow=numSamp, ncol=4)
print(out[1, ])
# loop over desired number of samples
# initialize the first theta reference value
tref = t0
for (i in 1:numSamp){
#print("step: ")
#print(i)
# sample vector theta* from proposal distribution with mean tref
tstar = SampleProposalDtbn(tt = tref, sigParam=sigmaParam)
#print("tstar: ")
#print(tstar)
#print("tref: ")
#print(tref)
# compute acceptance ratio
a = TargetDtbn(y=y, x1=x1, x2=x2, tt=tstar)
#print("a: ")
#print(a)
b = log(DensityProposalDtbn(t=tstar, tprime=tref, sigParam=sigmaParam))
#print("b: ")
#print(b)
num = a - b
#print("numerator: ")
#print(log(num))
c = TargetDtbn(y=y, x1=x1, x2=x2, tt=tref)
#print("c: ")
#print(c)
d = log(DensityProposalDtbn(t=tref, tprime=tstar, sigParam=sigmaParam))
#print("b: ")
#print(b)
den = c - d
#print("denominator: ")
#print(log(den))
r = num - den
#print("r: ")
#print(log(r))
#print(r)
# determine theta_t value
testval = runif(1)
#print("testval: ")
#print(testval)
if (log(testval) <= r) {
tt = tstar
} else {
tt = tref
}
# save tt values in output matrix
out[i, 1] = tt[1]
out[i,2] = tt[2]
out[i, 3] = tt[3]
out[i,4] = tt[4]
# iterate the reference theta forward one
tref = tt
}
return(out)
}
Dat = MHsampling(510000, y=ydat, x1=x1dat, x2=x2dat, t0=c(1.5, 0.1, 0.04, 0.6), sigmaParam=sigmaSqrd)
dat = Dat[10001:510000, ]
# OLS
#model = lm(y ~ x1 + x2)
#dat =Dat
mu1 = mean(dat[ , 1])
mu2 = mean(dat[ , 2])
mu3 = mean(dat[ , 3])
mu4 = mean(dat[ , 4])
hist(dat[ , 1],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b0")
abline(v=mu1, lwd=3, col="red")
hist(dat[ , 2],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b1")
abline(v=mu2, lwd=3, col="red")
hist(dat[ , 3],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b2")
abline(v=mu3, lwd=3, col="red")
hist(dat[ , 4],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "sig")
abline(v=mu4, lwd=3, col="red")
summary(model)$coefficients
x1mc = (x1dat- mean(x1dat))
x2mc = (x2dat - mean(x2dat))
model = lm(ydat ~ x1mc + x2mc)
print(model)
summary(model)
summary(model)$coefficients
summary(model)$coefficients[1]
summary(model)$coefficients[2]
summary(model)$sigma
x1mc = (x1dat- mean(x1dat))
x2mc = (x2dat - mean(x2dat))
model = lm(ydat ~ x1mc + x2mc)
print(model)
summary(model)
b0OLS = summary(model)$coefficients[1]
b1OLS = summary(model)$coefficients[2]
b2OLS = summary(model)$coefficients[3]
sigmaOLS = summary(model)$sigma
# OLS
#model = lm(y ~ x1 + x2)
#dat =Dat
mu1 = mean(dat[ , 1])
mu2 = mean(dat[ , 2])
mu3 = mean(dat[ , 3])
mu4 = mean(dat[ , 4])
hist(dat[ , 1],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b0")
abline(v=mu1, lwd=3, col="red")
abline(v=b0OLS, lwd=3, col="blue")
hist(dat[ , 2],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b1")
abline(v=mu2, lwd=3, col="red")
abline(v=b1OLS, lwd=3, col="blue")
hist(dat[ , 3],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b2")
abline(v=mu3, lwd=3, col="red")
abline(v=b2OLS, lwd=3, col="blue")
hist(dat[ , 4],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "sig")
abline(v=mu4, lwd=3, col="red")
abline(v=sigmaOLS, lwd=3, col="blue")
# compute standard deviations
sd0 = sd(dat[ ,1])
sd1 = sd(dat[ ,2])
sd2 = sd(dat[ ,3])
sdsig = sd(dat[ ,4])
# compute standard deviations
sd0 = sd(dat[ ,1])
sd1 = sd(dat[ ,2])
sd2 = sd(dat[ ,3])
sdsig = sd(dat[ ,4])
# compute standard deviations
sd0 = sd(dat[ ,1])
print(sd0)
sd1 = sd(dat[ ,2])
sd2 = sd(dat[ ,3])
sdsig = sd(dat[ ,4])
# compute standard deviations
sd0 = sd(dat[ ,1])
print(sd0)
sd1 = sd(dat[ ,2])
print(sd1)
sd2 = sd(dat[ ,3])
print(sd2)
sdsig = sd(dat[ ,4])
print(sdsig)
# compute standard deviations
sd0 = sd(dat[ ,1])
print(sd0)
sd1 = sd(dat[ ,2])
print(sd1)
sd2 = sd(dat[ ,3])
print(sd2)
sdsig = sd(dat[ ,4])
print(sdsig)
# compute correlation
covar = cov(dat[ ,2], dat[ ,3])
rho = covar / (sd1 * sd2)
print(covar)
print(rho)
# compute standard deviations
sd0 = sd(dat[ ,1])
paste("Standard deviation of beta0: ", sd0)
sd1 = sd(dat[ ,2])
paste("Standard deviation of beta1: ", sd1)
sd2 = sd(dat[ ,3])
paste("Standard deviation of beta2: ", sd2)
sdsig = sd(dat[ ,4])
paste("Standard deviation of sigma: ", sdsig)
# compute correlation
covar = cov(dat[ ,2], dat[ ,3])
rho = covar / (sd1 * sd2)
print(covar)
print(rho)
# compute standard deviations
sd0 = sd(dat[ ,1])
paste("Standard deviation of beta0: ", sd0)
sd1 = sd(dat[ ,2])
paste("Standard deviation of beta1: ", sd1)
sd2 = sd(dat[ ,3])
paste("Standard deviation of beta2: ", sd2)
sdsig = sd(dat[ ,4])
paste("Standard deviation of sigma: ", sdsig)
# compute correlation
covar = cov(dat[ ,2], dat[ ,3])
rho = covar / (sd1 * sd2)
paste("Correlation rho: ", rho)
# OLS
#model = lm(y ~ x1 + x2)
#dat =Dat
mu1 = mean(dat[ , 1])
mu2 = mean(dat[ , 2])
mu3 = mean(dat[ , 3])
mu4 = mean(dat[ , 4])
hist(dat[ , 1],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b0")
abline(v=mu1, lwd=3, col="red")
abline(v=b0OLS, lwd=3, col="blue")
hist(dat[ , 2],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b1")
abline(v=mu2, lwd=3, col="red")
abline(v=b1OLS, lwd=3, col="blue")
hist(dat[ , 3],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b2")
abline(v=mu3, lwd=3, col="red")
abline(v=b2OLS, lwd=3, col="blue")
hist(dat[ , 4],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "sig",
main="sigma histogram")
abline(v=mu4, lwd=3, col="red")
abline(v=sigmaOLS, lwd=3, col="blue")
mu1 = mean(dat[ , 1])
mu2 = mean(dat[ , 2])
mu3 = mean(dat[ , 3])
mu4 = mean(dat[ , 4])
hist(dat[ , 1],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b0",
main="Beta0 Histogram")
abline(v=mu1, lwd=3, col="red")
abline(v=b0OLS, lwd=3, col="blue")
hist(dat[ , 2],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b1",
main="Beta1 Histogram")
abline(v=mu2, lwd=3, col="red")
abline(v=b1OLS, lwd=3, col="blue")
hist(dat[ , 3],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b2",
main="Beta2 Histogram")
abline(v=mu3, lwd=3, col="red")
abline(v=b2OLS, lwd=3, col="blue")
hist(dat[ , 4],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "sig",
main="Sigma Histogram")
abline(v=mu4, lwd=3, col="red")
abline(v=sigmaOLS, lwd=3, col="blue")
x1mc = (x1dat- mean(x1dat))
x2mc = (x2dat - mean(x2dat))
model = lm(ydat ~ x1mc + x2mc)
summary(model)
b0OLS = summary(model)$coefficients[1]
b1OLS = summary(model)$coefficients[2]
b2OLS = summary(model)$coefficients[3]
sigmaOLS = summary(model)$sigma
#c ompute OLS
x1mc = (x1dat- mean(x1dat))
x2mc = (x2dat - mean(x2dat))
model = lm(ydat ~ x1mc + x2mc)
summary(model)
b0OLS = summary(model)$coefficients[1]
b1OLS = summary(model)$coefficients[2]
b2OLS = summary(model)$coefficients[3]
sigmaOLS = summary(model)$sigma
mu1 = mean(dat[ , 1])
mu2 = mean(dat[ , 2])
mu3 = mean(dat[ , 3])
mu4 = mean(dat[ , 4])
# plot histograms
hist(dat[ , 1],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b0",
main="Beta0 Histogram")
abline(v=mu1, lwd=3, col="red")
abline(v=b0OLS, lwd=3, col="blue")
hist(dat[ , 2],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b1",
main="Beta1 Histogram")
abline(v=mu2, lwd=3, col="red")
abline(v=b1OLS, lwd=3, col="blue")
hist(dat[ , 3],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "b2",
main="Beta2 Histogram")
abline(v=mu3, lwd=3, col="red")
abline(v=b2OLS, lwd=3, col="blue")
hist(dat[ , 4],
breaks = 100,
col="peachpuff",
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "sig",
main="Sigma Histogram")
abline(v=mu4, lwd=3, col="red")
abline(v=sigmaOLS, lwd=3, col="blue")
# define functions
TargetDtbn = function(y, x1, x2, tt) {
# translate parameters to model description
constant = tt[1]
beta_sC = tt[2]
beta_eC = tt[3]
sigma = tt[4]
# compute and return posterior
logPost = log(1/sigma ^ 2)
predVal = constant + beta_sC * x1 + beta_eC * x2
logPost = logPost + sum(log(dnorm(y, predVal, sigma)))
return(logPost)
}
SampleProposalDtbn = function(tt, sigParam) {
#proposal distribution is a 4D multivariate normal
# tt is a vector of 4 known values: b0, b1, b2, sig (the means)
# sigParam is a free parameter which we have to optimize for sampling
tstar = rmvnorm(1, mean=tt, sigma=diag(rep(sigParam, 4)))
isNegative = TRUE
while (isNegative == TRUE){
if (tstar[4] <= 0){
# resample
newt = rmvnorm(1, mean=tt, sigma=diag(rep(sigParam, 4)))
tstar[4] = newt[4]
} else {
isNegative = FALSE
}
}
return(tstar)
}
DensityProposalDtbn = function(t, tprime, sigParam) {
prob = dmvnorm(t, mean=tprime, sigma=diag(rep(sigParam, 4)))
return(prob)
}
MHsampling = function(numSamp, y, x1, x2, t0, sigmaParam) {
# make blank matrix for output
out = matrix(rep(0, numSamp * 4), nrow=numSamp, ncol=4)
print(out[1, ])
# loop over desired number of samples
# initialize the first theta reference value
tref = t0
for (i in 1:numSamp){
# sample vector theta* from proposal distribution with mean tref
tstar = SampleProposalDtbn(tt = tref, sigParam=sigmaParam)
# compute acceptance ratio
a = TargetDtbn(y=y, x1=x1, x2=x2, tt=tstar)
b = log(DensityProposalDtbn(t=tstar, tprime=tref, sigParam=sigmaParam))
num = a - b
c = TargetDtbn(y=y, x1=x1, x2=x2, tt=tref)
d = log(DensityProposalDtbn(t=tref, tprime=tstar, sigParam=sigmaParam))
den = c - d
r = num - den
# determine theta_t value
testval = runif(1)
if (log(testval) <= r) {
tt = tstar
} else {
tt = tref
}
# save tt values in output matrix
out[i, 1] = tt[1]
out[i,2] = tt[2]
out[i, 3] = tt[3]
out[i,4] = tt[4]
# iterate the reference theta forward one
tref = tt
}
return(out)
}
